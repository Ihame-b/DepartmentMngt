/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package smcView;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author IHAME
 */
public class UploadStudentsfile extends javax.swing.JInternalFrame {

    /**
     * Creates new form UploadStudentsfile
     */
    public UploadStudentsfile() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setBackground(new java.awt.Color(102, 204, 0));
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setAutoscrolls(true);
        setDoubleBuffered(true);
        setInheritsPopupMenu(true);

        jButton1.setText("Upload Staff List");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Upload Student List");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Upload Course List");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(548, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(548, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(jButton1)
                .addGap(34, 34, 34)
                .addComponent(jButton3)
                .addContainerGap(138, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(21, 21, 21)
                    .addComponent(jButton2)
                    .addContainerGap(242, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        String jdbcURL = "jdbc:mysql://localhost:3306/deppro";
        String username = "root";
        String password = "";
        
        

        
 
        int batchSize = 1000;
 
        Connection connection = null;
 
       
           //String path;
           
            JFileChooser chooser =new JFileChooser();
            chooser.setDialogTitle("Import Excel File");
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Excel files", "xlsx", "xls");
            chooser.addChoosableFileFilter(filter);            
            chooser.setFileFilter(filter);                  
        int result= chooser.showOpenDialog(null);
            if (result==JFileChooser.APPROVE_OPTION){
            
           
             //
            try {
             //File file = chooser.getSelectedFile();
            long start = System.currentTimeMillis();
            String  path=chooser.getSelectedFile().getAbsolutePath();
            
            FileInputStream inputStream = new FileInputStream( path);
 
            PreparedStatement statement;
                try (Workbook workbook = new XSSFWorkbook(inputStream)) {
                    org.apache.poi.ss.usermodel.Sheet firstSheet = workbook.getSheetAt(0);
                    Iterator<Row> rowIterator = firstSheet.iterator();
                    connection = DriverManager.getConnection(jdbcURL, username, password);
                    connection.setAutoCommit(false);
                    String sql = "INSERT INTO staff (staffid, staffmanagerid, staffaddress, email,gender) VALUES (?,?,?,?,?)";
                    statement = connection.prepareStatement(sql);
                    int count = 0;
                    rowIterator.next(); // skip the header row
                    while (rowIterator.hasNext()) {
                        Row nextRow = rowIterator.next();
                        Iterator<org.apache.poi.ss.usermodel.Cell> cellIterator = nextRow.cellIterator();
                        
                        while (cellIterator.hasNext()) {
                            org.apache.poi.ss.usermodel.Cell nextCell = cellIterator.next();
                            
                            int columnIndex = nextCell.getColumnIndex();    
                            
                            switch (columnIndex) {
                                
                                case 0:
                                    int staffid = (int) nextCell.getNumericCellValue();
                                    statement.setInt(1, staffid);
                                    break;
                                    
                                case 1:
                                    int staffmanagerid = (int) nextCell.getNumericCellValue();
                                    statement.setInt(2, staffmanagerid);
                                    break;
                                    
                                    
                                case 2:
                                    String staffaddress = new DataFormatter().formatCellValue(nextCell);;
                                    statement.setString(3, staffaddress);
                                    
                                case 3:
                                    String email = new DataFormatter().formatCellValue(nextCell);;
                                    statement.setString(4, email);
                                    
                                    
                                case 4:
                                    String gender = new DataFormatter().formatCellValue(nextCell);;
                                    statement.setString(5, gender);
                                    
                            }
                            
                        }
                        
                        statement.addBatch();
                        
                        if (count % batchSize == 0) {
                            statement.executeBatch();
                        }  
                        
                    }   }
             
            // execute the remaining queries
            statement.executeBatch();
  
            connection.commit();
            connection.close();
             
            long end = System.currentTimeMillis();
            System.out.printf("Import done in %d ms\n", (end - start));
             
        }       catch (FileNotFoundException ex) {    
                    Logger.getLogger(UploadStudentsfile.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException | SQLException ex) {
                    Logger.getLogger(UploadStudentsfile.class.getName()).log(Level.SEVERE, null, ex);
                }    
        } 
                         
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        String jdbcURL = "jdbc:mysql://localhost:3306/deppro";
        String username = "root";
        String password = "";
        
        

        
 
        int batchSize = 1000;
 
        Connection connection = null;
 
       
           //String path;
           
           JFileChooser chooser =new JFileChooser();
           chooser.setDialogTitle("Import Excel File");
           chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Excel files", "xlsx", "xls");
            chooser.addChoosableFileFilter(filter);            
            chooser.setFileFilter(filter);                  
        int result= chooser.showOpenDialog(null);
            if (result==JFileChooser.APPROVE_OPTION){
            
           
             //
            try {
             //File file = chooser.getSelectedFile();
            long start = System.currentTimeMillis();
            String  path=chooser.getSelectedFile().getAbsolutePath();
            
            FileInputStream inputStream = new FileInputStream( path);
 
            PreparedStatement statement;
                try (Workbook workbook = new XSSFWorkbook(inputStream)) {
                    org.apache.poi.ss.usermodel.Sheet firstSheet = workbook.getSheetAt(0);
                    Iterator<Row> rowIterator = firstSheet.iterator();
                    connection = DriverManager.getConnection(jdbcURL, username, password);
                    connection.setAutoCommit(false);
                    String sql = "INSERT INTO student (firstName, lastName, id, gender, department, phone) VALUES (?,?,?,?,?,?)";
                    statement = connection.prepareStatement(sql);
                    int count = 0;
                    rowIterator.next(); // skip the header row
                    while (rowIterator.hasNext()) {
                        Row nextRow = rowIterator.next();
                        Iterator<org.apache.poi.ss.usermodel.Cell> cellIterator = nextRow.cellIterator();
                        
                        while (cellIterator.hasNext()) {
                            org.apache.poi.ss.usermodel.Cell nextCell = cellIterator.next();
                            
                            int columnIndex = nextCell.getColumnIndex();
                            
                            switch (columnIndex) {
                                
                                
                                case 0:
                                    
                                    String firstName = new DataFormatter().formatCellValue(nextCell);;
                                    statement.setString(1, firstName);
                                    break;
                                    
                                case 1:
                                    
                                    String lastName = new DataFormatter().formatCellValue(nextCell);;
                                    statement.setString(2, lastName);
                                    break;
                                    
                                case 2:
                                    int Id = (int) nextCell.getNumericCellValue();
                                    statement.setInt(3, Id);
                                    break;
                                    
                                    
                                case 3:
                                    String gender = new DataFormatter().formatCellValue(nextCell);;
                                    statement.setString(4, gender);
                                    break;
                                    
                                case 4:
                                    String department = new DataFormatter().formatCellValue(nextCell);;
                                    statement.setString(5, department);
                                    break;
                                    
                                case 5:
                                    String phone = new DataFormatter().formatCellValue(nextCell);;
                                    statement.setString(6, phone);
                                    break;
                                    
                            }
                            
                        }
                        
                        statement.addBatch();
                        
                        if (count % batchSize == 0) {
                            statement.executeBatch();
                        }
                        
                    }   }
             
            // execute the remaining queries
            statement.executeBatch();
  
            connection.commit();
            connection.close();
             
            long end = System.currentTimeMillis();
            System.out.printf("Import done in %d ms\n", (end - start));
             
        }       catch (FileNotFoundException ex) {    
                    Logger.getLogger(UploadStudentsfile.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(UploadStudentsfile.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(UploadStudentsfile.class.getName()).log(Level.SEVERE, null, ex);
                }    
        } 
                         
        
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
        String jdbcURL = "jdbc:mysql://localhost:3306/deppro";
        String username = "root";
        String password = "";
        
        

        
 
        int batchSize = 1000;
 
        Connection connection = null;
 
       
           //String path;
           
           JFileChooser chooser =new JFileChooser();
           chooser.setDialogTitle("Import Excel File");
           chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Excel files", "xlsx", "xls");
            chooser.addChoosableFileFilter(filter);            
            chooser.setFileFilter(filter);                  
        int result= chooser.showOpenDialog(null);
            if (result==JFileChooser.APPROVE_OPTION){
            
           
             //
            try {
             //File file = chooser.getSelectedFile();
            long start = System.currentTimeMillis();
            String  path=chooser.getSelectedFile().getAbsolutePath();
            
            FileInputStream inputStream = new FileInputStream( path);
 
            Workbook workbook = new XSSFWorkbook(inputStream);
 
            org.apache.poi.ss.usermodel.Sheet firstSheet = workbook.getSheetAt(0);
            Iterator<Row> rowIterator = firstSheet.iterator();
 
            connection = DriverManager.getConnection(jdbcURL, username, password);
            connection.setAutoCommit(false);
  
            String sql = "INSERT INTO courses (courseName, courseId, courseTeacher, courseCredit,coursePrice) VALUES (?,?,?,?,?)";
            PreparedStatement statement = connection.prepareStatement(sql);    
             
            int count = 0;
             
            rowIterator.next(); // skip the header row
             
            while (rowIterator.hasNext()) {
                Row nextRow = rowIterator.next();
                Iterator<org.apache.poi.ss.usermodel.Cell> cellIterator = nextRow.cellIterator();
 
                while (cellIterator.hasNext()) {
                    org.apache.poi.ss.usermodel.Cell nextCell = cellIterator.next();
 
                    int columnIndex = nextCell.getColumnIndex();
 
                    switch (columnIndex) {
                        
                        
                     case 0:
                         String courseName = new DataFormatter().formatCellValue(nextCell);;
                        statement.setString(1, courseName); 
                        break;
                        
                   case 1:
                     int courseId = (int) nextCell.getNumericCellValue();
                     statement.setInt(2, courseId);
                        break;  
                        
                        
                        case 2:
                         String courseTeacher = new DataFormatter().formatCellValue(nextCell);;
                        statement.setString(3, courseTeacher);
                        break;
                        
                    case 3:
                       int courseCredit = (int) nextCell.getNumericCellValue();
                     statement.setInt(4, courseCredit);
                        break;     
                        
                       case 4:
                       int coursePrice = (int) nextCell.getNumericCellValue();
                     statement.setInt(5, coursePrice);
                        break;  
                                    
                    }
 
                }
                 
                statement.addBatch();
                 
                if (count % batchSize == 0) {
                    statement.executeBatch();
                }              
 
            }
 
            workbook.close();
             
            // execute the remaining queries
            statement.executeBatch();
  
            connection.commit();
            connection.close();
             
            long end = System.currentTimeMillis();
            System.out.printf("Import done in %d ms\n", (end - start));
             
        }       catch (FileNotFoundException ex) {    
                    Logger.getLogger(UploadStudentsfile.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(UploadStudentsfile.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(UploadStudentsfile.class.getName()).log(Level.SEVERE, null, ex);
                }    
        } 
                         
        
        
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    // End of variables declaration//GEN-END:variables
}
